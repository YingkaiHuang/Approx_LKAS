#include <Eigen/Eigen>
#include "config.hpp"

using namespace std;
using namespace Eigen;

// constructor
lateralController::lateralController() {
    // initialize member variables 
    m_d   = 0.135L;   // 2*d = distance between left and right wheels
    m_l   = 0.42L;    // l = distance between front and read wheels 
    m_vx  = 2.2L;     // vehicle longitudinal speed is 2.2m/s to simulate ~80km/h in reality
    m_LL  = 0.55L;    // look-ahead distance is 0.25s*vx
    m_l_r = 0.21L;    // distance from CG to rear axle (m)

    m_z1    = 0.0L;         // z1 is vy
    m_z2    = 0.0L;         // z2 is yaw rate
    m_z3    = 0.0L;         // z3 is yL
    m_z4    = 0.0L;         // z4 is epsilon_L
    m_z5    = 0.0L;         // z5 is curvature at lookahead distance KL (which is K_ref of CoG)
    fill(m_input.begin(), m_input.end(), 0.0L); // m_input is the input of the last sampling period.

    m_desired_steering_angle = 0.0L;
    m_steering_angle_left    = 0.0L;
    m_steering_angle_right   = 0.0L;

    // controller design time parameters
    // Eigen::Matrix<typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime>
	///// VALUES ARE WITHOUT CONSIDERING ACTUATE DELAY //////////
   // v0  
    m_phi_aug[0] <<   
0.065327631161289923,   -0.0057488315421935186,   0,   0,   0,   0.7239450018316782,
     0,   0.065327631161289923,   0,   0,   0,   4.0446768871782917,
     -0.013703164614691236,   -0.0080272205354882439,   1,   0.088000000000000009,   0.0038720000000000009,   -0.10602752126758376,
     0,   -0.013703164614691236,   0,   1,   0.088000000000000009,   -0.13660604393035128,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

// // v0 q=7.5
    m_K2c[0] <<
-0.61935468323140397,   -0.52928274538683717,   -1.537019156263876,   0.11099302702588514,   -0.27007922328911582;
//v0 q=12.5
//     m_K2c[0] <<
// -0.10971256332977458,   -0.93475959871833403,   -2.1549625509490422,   0.21623195373822424,   -0.43675359007892589;
// //v0 q=10
//     m_K2c[0] <<
// -0.10010595490980388,   -0.85053499727153059,   -2.0303662024836084,   0.20519639640544476,   -0.41282981911566269;

          

    m_T[0] <<
1.6653345369377348e-16,   -2.4286128663675299e-17,   2.7755575615628914e-17,   -8.3266726846886741e-17,   1,   -3.0357660829594124e-18,
     -0.48728824357432854,   0.090420491672251718,   -0.63486412708897877,   0.59265403754954549,   1.6653345369377348e-16,   0.0091123142924867256,
     0.84973224504203848,   -0.15413756988262939,   -0.43127299980338907,   0.26047727933678888,   0,   -0.018759207776057885,
     -0.095973518183057646,   -0.028765229103003408,   -0.64002353634358222,   -0.7607443704486081,   0,   0.039994014042410826,
     0.11649905789693848,   0.74467056785471941,   -0.036339862358710048,   -0.046690922769680683,   0,   -0.65451744592082584,
     0.13312525202513381,   0.64242046293841493,   -0.00065353358004817429,   -0.00085981811639752068,   0,   0.75470023829193533;
   
    
    m_Gamma_aug[0] <<
0.17639487212357025,
     0.8512259972149524,
     -0.00086595120405324761,
     -0.0011392842784089905,
     0,
     1;

   
   // v1  
    m_phi_aug[1] <<   
0.18173374202393422,   -0.0099953558113163761,   0,   0,   0,   0.50926345754336566,
     0,   0.18173374202393422,   0,   0,   0,   2.7979879073952048,
     -0.011996542965771949,   -0.0067771168753804597,   1,   0.055000000000000007,   0.0015125000000000004,   -0.049306522675555846,
     0,   -0.011996542965771949,   0,   1,   0.055000000000000007,   -0.064264614097859843,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

// // v1 q=7.5
    m_K2c[1] <<
-0.88126310400389396,   -0.50594810312542393,   -1.5202359728923434,   0.050180681659190214,   -0.12722642629683453;
// v1 q=2.5
//     m_K2c[1] <<
// -0.68642575997363919,   -0.42230262218973824,   -1.3150249826288494,   0.042576727323744915,   -0.10937487465110513;        

    m_T[1] <<
-9.7144514654701197e-17,   2.2551405187698492e-17,   -5.5511151231257827e-16,   3.8857805861880479e-16,   1,   1.5178830414797062e-18,
     -0.16392254471045592,   0.031421646056680429,   -0.74451777925459917,   0.64639218680457411,   -6.106226635438361e-16,   0.0035350681093613287,
     0.94572695599071988,   -0.17677822279727351,   -0.26533656957679413,   -0.057046099257182181,   0,   -0.026310303341521929,
     -0.21509862579529959,   0.0040740225199670868,   -0.61154331524089089,   -0.75942468011479591,   0,   0.054817080715785754,
     0.0659500363134089,   0.54607181998674792,   -0.036082767770153588,   -0.046824783109469838,   0,   -0.83304359650826021,
     0.16766960946876686,   0.81826102794926858,   -0.0016089354382828893,   -0.0021162034003243293,   0,   0.54984427359928112;
   

    m_Gamma_aug[1] <<
0.30494017582687805,
     1.4881686820032356,
     -0.0029261656718743223,
     -0.0038487322719061162,
     0,
     1;
   
    


    // v2
    m_phi_aug[2] <<   
0.12921790123523191,   -0.0085283814815253108,   0,   0,   0,   0.84052596516019162,
     0,   0.12921790123523191,   0,   0,   0,   4.4902682217034711,
     -0.012766473943939857,   -0.0072906751467964239,   1,   0.066000000000000003,   0.0021779999999999998,   -0.069464907675733087,
     0,   -0.012766473943939857,   0,   1,   0.066000000000000003,   -0.090263737499399435,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;
  

     // q=10
    m_K2c[2] <<
-0.96472508215505792,   -0.58362599880756361,   -1.6801812568010639,   -0.049092821445669378,   -0.30229778566163434;
    

    m_T[2] <<
-1.9428902930940239e-16,   4.5102810375396984e-17,   -3.3306690738754696e-16,   3.8857805861880479e-16,   1,   2.8460307027744491e-19,
     -0.18828295446952312,   0.03688191526887117,   -0.73657688301919833,   0.64857051588433645,   -5.5511151231257827e-16,   0.00018630506005004333,
     0.94153832881927846,   -0.18128870070885739,   -0.2816494496509776,   -0.036224844420412572,   0,   -0.0011534806078764247,
     -0.21036074703050736,   0.014369176092159276,   -0.61472918208568761,   -0.7600299278717525,   0,   0.002103406455987352,
     0.18325652923091101,   0.98008013711576603,   -0.015366052720601025,   -0.019963848856550805,   0,   -0.072286226129200604,
     0.014849411551794311,   0.070785471185602425,   -5.3919306845558602e-06,   -7.0946409724710094e-06,   0,   0.99738102647192506;
 


    m_Gamma_aug[2] <<
0.014888403887450804,
     0.070971343254838767,
     -5.4060890887697624e-06,
     -7.1132704394499669e-06,
     0,
     1;
  


    // v3
    m_phi_aug[3] <<   
0.065327631161289923,   -0.0057488315421935186,   0,   0,   0,   0.68812562403177713,
     0,   0.065327631161289923,   0,   0,   0,   3.8687679100553303,
     -0.013703164614691236,   -0.0080272205354882439,   1,   0.088000000000000009,   0.0038720000000000009,   -0.10559886169995726,
     0,   -0.013703164614691236,   0,   1,   0.088000000000000009,   -0.13604217569428381,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

    // q=7.5
    m_K2c[3] <<
-0.61355118396484731,   -0.53400102099489544,   -1.538751263679933,   0.11784237654145775,   -0.24690839517925031;
    
    m_T[3] <<
-8.3266726846886741e-17,   1.7347234759768071e-17,   -1.9428902930940239e-16,   1.9428902930940239e-16,   1,   1.7347234759768071e-18,
     -0.50246225088724417,   0.092649537014495909,   -0.62790253339759994,   0.5869841293477478,   0,   0.011652903975646712,
     0.84133656673211632,   -0.15146130697118299,   -0.44023190041492843,   0.27363408525391641,   0,   -0.023076291173179466,
     -0.092334904191372719,   -0.032221518828073725,   -0.64045776541466803,   -0.76006109599895799,   0,   0.050566987860611798,
     0.098559705579123635,   0.68195624179203396,   -0.041801136874550268,   -0.053663473245534034,   0,   -0.72152239418625308,
     0.14644015097255858,   0.70878275500104937,   -0.00089335658149182191,   -0.0011752740988843302,   0,   0.69005804758807587;

  

    m_Gamma_aug[3] <<
0.21221424992347124,
     1.0271349743379141,
     -0.0012946107716797521,
     -0.0017031525144764342,
     0,
     1;
   


    // v4
    m_phi_aug[4] <<   
0.25559270561048886,   -0.011246079046861503,   0,   0,   0,   0.48913261640933398,
     0,   0.25559270561048886,   0,   0,   0,   2.6214148445763494,
     -0.010913701993855197,   -0.0061084728899776829,   1,   0.044000000000000004,   0.00096800000000000033,   -0.034302699568264768,
     0,   -0.010913701993855197,   0,   1,   0.044000000000000004,   -0.044853339117444282,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

    // q=7.5
    m_K2c[4] <<
-0.95094585558027256,   -0.6031513248287721,   -1.4822734571837199,   0.04068833645938584,   -0.11380202610409683;

    m_T[4] <<
-1.6653345369377348e-16,   3.1225022567582528e-17,   -5.5511151231257827e-16,   5.5511151231257827e-16,   0.99999999999999989,   2.7105054312137611e-18,
     -0.094569680271755108,   0.018623980470476035,   -0.76036619423741025,   0.64230167915374492,   -7.2164496600635175e-16,   0.0012355330549858609,
     0.92831059084005307,   -0.17875019251414198,   -0.2715767527658422,   -0.17960116747357222,   0,   -0.016652435546759811,
     -0.30966257819887599,   0.031951216976552989,   -0.58949337494286536,   -0.74444249831714882,   0,   0.03729792212354624,
     0.088511454697934644,   0.60195288941039338,   -0.024192382305045411,   -0.031536623858004501,   0,   -0.79261504610484146,
     0.15990882576634013,   0.77738880535533095,   -0.0012678939049535561,   -0.001667828939102597,   0,   0.60835139807673433;

    m_Gamma_aug[4] <<
0.26285601754492899,
     1.2778614593687103,
     -0.0020841472690979672,
     -0.0027415552004570647,
     0,
     1;


    // v5
    m_phi_aug[5] <<   
0.12921790123523191,   -0.0085283814815253108,   0,   0,   0,   0.81144317462339066,
     0,   0.12921790123523191,   0,   0,   0,   4.3511972945347015,
     -0.012766473943939857,   -0.0072906751467964239,   1,   0.066000000000000003,   0.0021779999999999998,   -0.069422097203404282,
     0,   -0.012766473943939857,   0,   1,   0.066000000000000003,   -0.090207408300632883,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

    // q=10
    m_K2c[5] <<
 -0.96379393515684286,   -0.57871483015335201,   -1.6825348120837873,   -0.010880889133723528,   -0.29633736496234364;
        

    m_T[5] <<
1.8041124150158794e-16,   -5.2041704279304213e-17,   1.1102230246251565e-16,   -1.6653345369377348e-16,   1.0000000000000002,   -9.7578195523695399e-19,
     -0.19349776290945953,   0.03777355720853813,   -0.7354685476150189,   0.64824181695863636,   1.6653345369377348e-16,   0.0005799483326057814,
     0.94176795127719215,   -0.18059415434794646,   -0.2821932708891754,   -0.028524191254157394,   0,   -0.0034936715179666612,
     -0.20522449307416535,   0.012003919111730661,   -0.61577868159583382,   -0.76060117802453298,   0,   0.0064246905139376011,
     0.17795027918164519,   0.96106154582555514,   -0.016419086562032194,   -0.021325135389987454,   0,   -0.20969038001690887,
     0.04299240953728356,   0.20536679588608389,   -4.7143276003441387e-05,   -6.2030259897982381e-05,   0,   0.97774031613686718;
  
 
    m_Gamma_aug[5] <<
0.043971194424251743,
     0.21004227042360804,
     -4.8216561417563684e-05,
     -6.3442469206004582e-05,
     0,
     1;
    

    // v6
    m_phi_aug[6] <<   
0.25559270561048886,   -0.011246079046861503,   0,   0,   0,   0.70088874200339324,
     0,   0.25559270561048886,   0,   0,   0,   3.6550551331398697,
     -0.010913701993855197,   -0.0061084728899776829,   1,   0.044000000000000004,   0.00096800000000000033,   -0.036321366547281152,
     0,   -0.010913701993855197,   0,   1,   0.044000000000000004,   -0.047508736733892339,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;

    // q=7.5  
    m_K2c[6] <<
-0.95173778262620989,   -0.69768476768675169,   -1.4428370287714245,   -0.0081997449306354924,   -0.1815377787551716;
    

    m_T[6] <<
-9.7144514654701197e-17,   1.3877787807814457e-17,   -2.2204460492503131e-16,   1.6653345369377348e-16,   1,   2.574980159653073e-19,
     -0.073093734249085246,   0.014732501623011211,   -0.76460910643459346,   0.64016650455265589,   -2.2204460492503131e-16,   0.00014218150046005942,
     0.90350339720682793,   -0.1793152532295903,   -0.29875180585886685,   -0.24953790460616454,   0,   -0.0024174068254423243,
     -0.3781829630452529,   0.05662576115490206,   -0.57097378653105679,   -0.72645095412925131,   0,   0.0053959220740070115,
     0.18126885642758161,   0.95303413821626259,   -0.010450067529119205,   -0.013663267186685465,   0,   -0.24201579349754171,
     0.049579889078085859,   0.2369566372211373,   -6.3532531970265176e-05,   -8.3594764985212125e-05,   0,   0.97025428401599345;
  
    m_Gamma_aug[6] <<
0.051099891950869746,
     0.24422117080519004,
     -6.5480290081582293e-05,
     -8.6157584009012396e-05,
     0,
     1;
   

    // v7
    m_phi_aug[7] <<   
0.25559270561048886,   -0.011246079046861503,   0,   0,   0,   0.46775724634242388,
     0,   0.25559270561048886,   0,   0,   0,   2.5148268481161664,
     -0.010913701993855197,   -0.0061084728899776829,   1,   0.044000000000000004,   0.00096800000000000033,   -0.033897708238335482,
     0,   -0.010913701993855197,   0,   1,   0.044000000000000004,   -0.04432077999950252,
     0,   0,   0,   0,   1,   0,
     0,   0,   0,   0,   0,   0;
    
    // q=7.5
    m_K2c[7] <<
-0.95080823898219979,   -0.59354456614320594,   -1.4857709967792039,   0.036025784732249135,   -0.10804290389345;
    

    m_T[7] <<
1.5959455978986625e-16,   -3.2959746043559335e-17,   2.7755575615628914e-16,   -2.7755575615628914e-16,   1,   -3.7947076036992655e-18,
     -0.097423511989842948,   0.019130665126168598,   -0.75981865782337532,   0.64250780090623127,   2.7755575615628914e-16,   0.001417731116503629,
     0.93054614505664857,   -0.17851020153285507,   -0.26904715352061614,   -0.17171559228660832,   0,   -0.018583982808416225,
     -0.30219853631609794,   0.029070492534500718,   -0.59125793593979548,   -0.74599150095728473,   0,   0.041733497336306845,
     0.079479543442927847,   0.57226835822030475,   -0.02648060808538143,   -0.034504860386990473,   0,   -0.81504608480689233,
     0.16416935784209952,   0.7996448950904198,   -0.0014377028829073131,   -0.0018910974247756532,   0,   0.5775905301011216;
  

    m_Gamma_aug[7] <<
0.28423138761183908,
     1.3844494558288933,
     -0.0024891385990272515,
     -0.003274114318398831,
     0,
     1;
}
// destructor
lateralController::~lateralController(){}

// class methods
void lateralController::compute_steering_angles(long double the_yL, int the_it_counter, int the_pipe_version) {
    m_z3 = the_yL;
    m_z5 = 2 * m_z3 / ( pow( m_LL + m_l_r, 2 ) );   // curvature calculate

    Matrix<long double, 6, 1> zt_temp, zt;       // zt is the transferred state vector
    if (the_it_counter == 0){
        zt_temp <<  m_z1,
                    m_z2,
                    m_z3,
                    m_z4,
                    m_z5,
                    0.0L;
    } else {
        zt_temp <<  m_z1,
                    m_z2,
                    m_z3,
                    m_z4,
                    m_z5,
                    m_input[the_it_counter-1];
    }

    zt = m_T[the_pipe_version] * zt_temp;        

    Matrix<long double, 5, 1> zt_temp_2;
    zt_temp_2 << zt[1], 
                 zt[2], 
                 zt[3], 
                 zt[4], 
                 zt[5];

    // calculate the desired steering angle 
    m_desired_steering_angle = m_K2c[the_pipe_version] * zt_temp_2;   
    // calculate left front tire steering angle according to desired steering angle                     
    m_steering_angle_left    = atan( m_l / (-m_d + m_l / tan(m_desired_steering_angle) ) );  
    // calculate right front tire steering angle according to desired steering angle 
    m_steering_angle_right   = atan( m_l / ( m_d + m_l / tan(m_desired_steering_angle) ) );         
}

vector<long double> lateralController::get_steering_angles() {
    // return steering angles
    vector<long double> steering_angles(2);
    steering_angles[0] = m_steering_angle_left;
    steering_angles[1] = m_steering_angle_right;
    return steering_angles;     
}

void lateralController::estimate_next_state(int the_it_counter, int the_pipe_version) {
    // transfer state vector
    Matrix<long double, 6, 1> zkp_temp, zkp;  
    if (the_it_counter == 0){
        zkp_temp << m_z1,
                    m_z2,
                    m_z3,
                    m_z4,
                    m_z5,
                    0.0L;       
    } else {
        zkp_temp << m_z1,
                    m_z2,
                    m_z3,
                    m_z4,
                    m_z5,
                    m_input[the_it_counter-1]; 
    }

    // given the control design, estimate next states
    zkp = m_phi_aug[the_pipe_version]   * zkp_temp + 
          m_Gamma_aug[the_pipe_version] * m_desired_steering_angle;  

        m_z1 = zkp[0];
        m_z2 = zkp[1];
        m_z4 = zkp[3];
        m_z5 = zkp[4];
        m_input[the_it_counter+1] = m_desired_steering_angle;
}

